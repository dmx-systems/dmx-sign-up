stages:
  - build
  - test
  - deploy
  - install

# 1) Build every commit on every branch and add the COMMIT SHORT SHA as suffix
maven-build:
  stage: build
  tags:
    - shell-docker
  script:
    - export MAVEN_OPTS='-Xmx128m'
    - mvn clean install -DskipTests=true
  artifacts:
    paths:
      - target
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}

# 2) Run SonarQube Tests
sonarqube-check:
  stage: test
  tags:
    ## requires shell-docker runner
    - shell-docker
  dependencies:
    - maven-build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "CI_PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE} CI_PROJECT_NAME=${CI_PROJECT_NAME} SONAR_PROJECT_KEY=${SONAR_PROJECT_KEY}"
    - mvn -Pcoverage verify sonar:sonar -Dsonar.host.url=https://sonar.dmx.systems -Dsonar.projectKey=dmx-plugins_dmx-sign-up_AYxdE6-TWz_jNrZo2i4B
  allow_failure: true

# 3) Copies SNAPSHOT builds on 'main' and 'dm4' branch into download.dmx.systems/ci/ directory
copy-to-ci:
  stage: deploy
  script:
    - CIDIR='/var/www/download.dmx.systems/ci'
    - DESTDIR="${CIDIR}/${CI_PROJECT_NAME}"
    - JARFILE="$( basename $( ls target/*.jar | tail -n1) )"
    - NUNC="$( date +%F )"
    - DESTJARFILE="$( basename ${JARFILE} .jar )_${NUNC}_${CI_PIPELINE_ID}.jar"
    - if [ ! -d  ${DESTDIR} ]; then mkdir ${DESTDIR}; fi
    - cp target/${JARFILE} ${DESTDIR}/${DESTJARFILE}
    - ln -sf  ${DESTDIR}/${DESTJARFILE} ${DESTDIR}/${CI_PROJECT_NAME}-latest.jar
  dependencies:
    - maven-build
  only:
    - master
    - main
    - dm4

# 4) Copies tagged RELEASE builds into download.dmx.systems/plugins/ directory
copy-to-release:
  stage: deploy
  script:
    - RELEASEDIR='/var/www/download.dmx.systems/plugins'
    - DESTDIR="${RELEASEDIR}/${CI_PROJECT_NAME}"
    - JARFILE="$( basename $( ls target/*.jar | tail -n1) )"
    - if [ ! -d  ${DESTDIR} ]; then mkdir ${DESTDIR}; fi
    - cp target/${JARFILE} ${DESTDIR}/
  dependencies:
    - maven-build
  only:
    - tags

# 4) Deploy into gitlab maven group repository
deploy-to-gitlab-maven:
  stage: deploy
  image: maven:3.6-jdk-11
  script:
    - 'mvn -Pgitlab-maven-deployment deploy -s ci_settings.xml'
  only:
    - master
    - main
    - dm4

# 5) Install in docker-container
install-in-container:
  stage: install
  except:
    - tags
  tags:
    ## requires shell-docker runner
    - shell-docker
  dependencies:
    - maven-build
  script:
    - deploy/ci-deploy-docker-instances.sh
