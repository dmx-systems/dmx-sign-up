stages:
  - build
  - test
  - deploy
  - install

# 1) Build every commit on every branch and add the COMMIT SHORT SHA as suffix
maven-build:
  stage: build
  tags:
    - shell-docker
  script:
    - export MAVEN_OPTS='-Xmx128m'
    - mvn clean install -DskipTests=true
  artifacts:
    paths:
      - target
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}

# 2) Run SonarQube Tests
sonarqube-check:
  stage: test
  tags:
    ## requires shell-docker runner
    - shell-docker
  dependencies:
    - maven-build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn -Pcoverage verify sonar:sonar -Dsonar.host.url=https://sonar.dmx.systems -Dsonar.projectKey=dmx-plugins_dmx-sign-up_AYxdE6-TWz_jNrZo2i4B
  allow_failure: true

# 3) Copies SNAPSHOT builds on 'main' and 'dm4' branch into download.dmx.systems/ci/ directory
copy-to-ci:
  stage: deploy
  script:
    - CIDIR='/var/www/download.dmx.systems/ci'
    - DESTDIR="${CIDIR}/${CI_PROJECT_NAME}"
    - JARFILE="$( basename $( ls target/*.jar | tail -n1) )"
    - NUNC="$( date +%F )"
    - DESTJARFILE="$( basename ${JARFILE} .jar )_${NUNC}_${CI_PIPELINE_ID}.jar"
    - if [ ! -d  ${DESTDIR} ]; then mkdir ${DESTDIR}; fi
    - cp target/${JARFILE} ${DESTDIR}/${DESTJARFILE}
    - ln -sf  ${DESTDIR}/${DESTJARFILE} ${DESTDIR}/${CI_PROJECT_NAME}-latest.jar
  dependencies:
    - maven-build
  only:
    - master
    - main
    - dm4

# 4) Copies tagged RELEASE builds into download.dmx.systems/plugins/ directory
copy-to-release:
  stage: deploy
  script:
    - RELEASEDIR='/var/www/download.dmx.systems/plugins'
    - DESTDIR="${RELEASEDIR}/${CI_PROJECT_NAME}"
    - JARFILE="$( basename $( ls target/*.jar | tail -n1) )"
    - if [ ! -d  ${DESTDIR} ]; then mkdir ${DESTDIR}; fi
    - cp target/${JARFILE} ${DESTDIR}/
  dependencies:
    - maven-build
  only:
    - tags

# 4) Deploy into gitlab maven group repository
deploy-to-gitlab-maven:
  stage: deploy
  image: maven:3.6-jdk-11
  script:
    - 'mvn -Pgitlab-maven-deployment deploy -s ci_settings.xml'
  only:
    - master
    - main
    - dm4

# 5) Install in docker-container
install-in-container:
  stage: install
  except:
    - tags
  tags:
    ## requires shell-docker runner
    - shell-docker
  dependencies:
    - maven-build
  variables:
    COMPOSE_PROJECT_NAME: "${CI_PROJECT_NAME}_${CI_COMMIT_REF_SLUG}"
    WEB_URL: "${CI_COMMIT_REF_SLUG}_${CI_PROJECT_NAME}.ci.dmx.systems"
    CONFIG_DIR: 'deploy/.config'
    DOCKER_COMPOSE_PROFILE: 'dev-ci'
    ENV_FILE: "${CONFIG_DIR}/.env.${CI_COMMIT_REF_SLUG}.${DOCKER_COMPOSE_PROFILE}"
    WEBDIR: 'https://download.dmx.systems/ci'                              # <= stable|latest
    WEBCGI: 'https://download.dmx.systems/cgi-bin/v1/latest-version.cgi?'  # <= stable|latest
    #PLUGINS: "dmx-ldap dmx-sendmail dmx-thymeleaf"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - test -d "${CONFIG_DIR}" || mkdir -p "${CONFIG_DIR}"
    - test -f "${ENV_FILE}" || touch "${ENV_FILE}"
    - test -d deploy/instance/${DOCKER_COMPOSE_PROFILE} || mkdir -p deploy/instance/${DOCKER_COMPOSE_PROFILE}/conf deploy/instance/${DOCKER_COMPOSE_PROFILE}/logs deploy/instance/${DOCKER_COMPOSE_PROFILE}/db deploy/instance/${DOCKER_COMPOSE_PROFILE}/filedir deploy/instance/${DOCKER_COMPOSE_PROFILE}/bundle-deploy
    - test -f deploy/scripts/dmxstate.sh || curl --silent https://git.dmx.systems/dmx-contrib/dmx-state/-/raw/master/dmxstate.sh --create-dirs -o deploy/scripts/dmxstate.sh
    - chmod +x deploy/scripts/dmxstate.sh
    - test -d deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins || mkdir deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins
    #- if [ -z "$( ls -A deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins )" ]; then declare -a PLUGINS=(${PLUGINS}); else declare -a PLUGINS=(); fi
    - if [ -f deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins.list ];  then PLUGINS="$(<deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins.list)"; declare -a PLUGINS=(${PLUGINS}); else declare -a PLUGINS=(); fi
    - for plugin in "${PLUGINS[@]}"; do plugin_version="$( wget -q -O - "${WEBCGI}/ci/${plugin}/${plugin}-latest.jar" )"; echo "installing ${plugin_version}"; wget -q "${plugin_version}" -P deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins/; done
    - cp -v target/${CI_PROJECT_NAME}*.jar deploy/dmx/${DOCKER_COMPOSE_PROFILE}/plugins
  script:
    - if [ "${CI_COMMIT_BRANCH}" == "master" ] || [ "${CI_COMMIT_BRANCH}" == "main" ]; then WEB_URL="${CI_PROJECT_NAME}.ci.dmx.systems"; fi
    - USER_ID="$( id -u )"
    - GROUP_ID="$( id -g )"
    - DMX_PORT="$( get_port.sh ${WEB_URL}-dmx )"
    - MAIL_PORT="$( get_port.sh ${WEB_URL}-mail )"
    - LOGS_PORT="$( get_port.sh ${WEB_URL}-log )"
    - echo "user_id=${USER_ID}" >>"${ENV_FILE}"
    - echo "group_id=${GROUP_ID}" >>"${ENV_FILE}"
    - echo "DMX_PORT=${DMX_PORT}" >>"${ENV_FILE}"
    - echo "MAIL_PORT=${MAIL_PORT}" >>"${ENV_FILE}"
    - echo "LOGS_PORT=${LOGS_PORT}" >>"${ENV_FILE}"
    - cat "${ENV_FILE}"
    - echo "dmx.websockets.url = wss://${WEB_URL}/websocket" > deploy/dmx/${DOCKER_COMPOSE_PROFILE}/conf.d/config.properties.d/10_websocket_url
    - echo "dmx.host.url = https://${WEB_URL}/" > deploy/dmx/${DOCKER_COMPOSE_PROFILE}/conf.d/config.properties.d/10_host_url
    - docker compose --env-file "${ENV_FILE}" --file deploy/docker-compose.${DOCKER_COMPOSE_PROFILE}.yaml down -v --remove-orphans
    - docker compose --env-file "${ENV_FILE}" --file deploy/docker-compose.${DOCKER_COMPOSE_PROFILE}.yaml pull
    - docker compose --env-file "${ENV_FILE}" --file deploy/docker-compose.${DOCKER_COMPOSE_PROFILE}.yaml up --force-recreate -d
    - deploy/scripts/dmxstate.sh ./deploy/instance/${DOCKER_COMPOSE_PROFILE}/logs/dmx0.log 30 || true
    ## TEST
    - EXTERNAL_TEST_URL="https://${WEB_URL}/core/topic/0"
    - count=0
    - HTTP_CODE="$( curl -s -o /dev/null -w "%{http_code}" ${EXTERNAL_TEST_URL} )"
    - while [ "${HTTP_CODE}" == "502" -a ${count} -lt 5 ]; do sleep 1; HTTP_CODE="$( curl -s -o /dev/null -w "%{http_code}" ${EXTERNAL_TEST_URL} )"; echo -n "."; count=$(( ${count} + 1 )); done; echo ""
    - echo "${HTTP_CODE}"
    - if [ ${HTTP_CODE} -ne 200 ]; then echo "HTTP test for https://${WEB_URL}/ failed with error code ${HTTP_CODE}."; exit 1; fi
    - echo "You can now browse to https://${WEB_URL}/ for testing."
